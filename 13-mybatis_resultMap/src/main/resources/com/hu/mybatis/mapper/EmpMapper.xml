<?xml version="1.0" encoding="UTF-8" ?>
<!--
    1. 处理字段名和属性名不一致的情况
    2. 多对一的映射关系
-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hu.mybatis.mapper.EmpMapper">

    <!--
        字段名和属性名不一致的情况，如何处理映射关系？
        1.为查询的字段设置别名，和属性名保持一致

        2.当字段符合MYSQL的要求使用_（下划线） ，而属性符合java的要求使用驼峰
            此时可以在mybatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰
            emp_id:empId  emp_name:empName
        3.使用resultMap自定义映射
    -->

    <!--Emp getEmpByEmpId(@Param("empId") Integer empId);-->
    <!--方式三 自定义映射处理-->
    <!--
        resultMap：设置自定义的映射关系
        id:唯一标识
        type:处理映射关系的实体类的类型
        属性：
            id 设置主键的映射关系
            result 设置普通属性的映射关系
            assocation 处理多对一的映射关系（处理实体类类型的属性）
            collection 处理一对多的映射关系（处理集合类型的属性）
            column ：sql查询出来的某个字段名
            property：实体类的属性名
    -->
    <resultMap id="empResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <select id="getEmpByEmpId" resultMap="empResultMap">
        select * from t_emp where emp_id = #{empId}
    </select>



    <!--方式一，二 起别名 和 使用映射-->
    <select id="getEmpByEmpId-old" resultType="Emp">
    <!--select emp_id empId,emp_name empName, age,gender from t_emp where emp_id = #{empId} -->
    <!--使用下划线映射为驼峰之后-->
        select * from t_emp where emp_id = #{empId}
    </select>











    <!--
        处理多对一的映射关系：
            1.级联方式处理：
            2.association标签 多对一
            3.分步查询
    -->

    <!--Emp getEmpAndDeptByEmpId(@Param("empid") Integer empid);-->
    <!--方式一 级联方式-->
    <resultMap id="empAndDeptResultMap-one" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="dept_id" property="dept.deptId"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>

    <!--方式二 association 多对一-->
    <resultMap id="empAndDeptResultMap-two" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
            assocation： 处理多对一的映射关系（处理实体类类型的属性）
            property ： 设置需要处理映射关系的属性的属性名
            javaType：设置要处理的属性的类型
        -->
        <association property="dept" javaType="Dept">
            <id column="dept_id" property="deptId"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <select id="getEmpAndDeptByEmpId" resultMap="empAndDeptResultMap-two">
        select * from t_emp
        left join t_dept
        on t_emp.dept_id = t_dept.dept_id
        where t_emp.emp_id = #{empid}
    </select>



    <!--方式三分步查询-->
    <!--Emp getEmpAndDeptBystepone(@Param("empid") Integer empid);-->
    <resultMap id="empAndDeptByStepResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
            property 设置需要处理映射关系的属性的属性名
            select   设置分步查询的sql的唯一标识
            column   将查询出的某个字段作为分步查询的sql的条件
            fetchType 在开启延迟加载的环境中，通过该属性设置当前的分步步骤查询是否使用延迟加载
                fetchType="eager(立即加载)" | "lazy(延迟加载)"
        -->
        <association property="dept" fetchType="eager"
                     select="com.hu.mybatis.mapper.DeptMapper.getEmpAndDeptBystepTwo"
                     column="dept_id"/>
    </resultMap>
    <select id="getEmpAndDeptBystepone" resultMap="empAndDeptByStepResultMap">
        select * from t_emp where emp_id = #{empid}
    </select>







    <!--
        处理一对多
        分步查询第二步
        通过分步查询查询部门以及部门中的员工信息的第二步
    -->
    <!--List<Emp> getDeotAndEmpByStepTwo(@Param("deptId") Integer deptId);-->
    <select id="getDeotAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where dept_id = #{deptId}
    </select>

</mapper>